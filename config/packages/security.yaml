security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        # auto hasher with custom options for all PasswordAuthenticatedUserInterface instances
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: 'auto'
            cost:      15
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        backend_users:
            memory:
                users:
                    # passwords were manually hashed: plain password is "test" for both users
                    john_admin: { password: '$2y$15$a/kPUKwgpZMdFsyhq04fPeyejegsBsejbVEIt158PulWk8FBBeosC', roles: [ 'ROLE_ADMIN' ] }
                    jane_admin: { password: '$2y$15$a/kPUKwgpZMdFsyhq04fPeyejegsBsejbVEIt158PulWk8FBBeosC', roles: [ 'ROLE_ADMIN' ] }
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            id: App\Security\UserProvider

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            entry_point: http_basic
            lazy: true
            provider: backend_users
            http_basic:
                realm: Secured Area

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, roles: ROLE_ADMIN }

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
